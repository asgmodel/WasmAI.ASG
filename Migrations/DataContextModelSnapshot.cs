// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WasmAI.ASG.Data;

#nullable disable

namespace WasmAI.ASG.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupScenario", b =>
                {
                    b.Property<string>("GroupsGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScenariosScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsGroupId", "ScenariosScenarioId");

                    b.HasIndex("ScenariosScenarioId");

                    b.ToTable("GroupScenario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ScenarioSoftware", b =>
                {
                    b.Property<string>("ScenariosScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SoftwaresSoftwareId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScenariosScenarioId", "SoftwaresSoftwareId");

                    b.HasIndex("SoftwaresSoftwareId");

                    b.ToTable("ScenarioSoftware");
                });

            modelBuilder.Entity("ScenarioTactic", b =>
                {
                    b.Property<string>("ScenariosScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TacticsTacticId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScenariosScenarioId", "TacticsTacticId");

                    b.HasIndex("TacticsTacticId");

                    b.ToTable("ScenarioTactic");
                });

            modelBuilder.Entity("ScenarioTechnique", b =>
                {
                    b.Property<string>("ScenariosScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TechniquesTechniqueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScenariosScenarioId", "TechniquesTechniqueId");

                    b.HasIndex("TechniquesTechniqueId");

                    b.ToTable("ScenarioTechnique");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Answer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Scenario", b =>
                {
                    b.Property<string>("ScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HealthPercentage")
                        .HasColumnType("float");

                    b.Property<string>("ScenarioTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechniquesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScenarioId");

                    b.HasIndex("ScenarioTypeId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.ScenarioType", b =>
                {
                    b.Property<string>("ScenarioTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScenarioTypeId");

                    b.ToTable("ScenarioTypes");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Software", b =>
                {
                    b.Property<string>("SoftwareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoftwareType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SoftwareId");

                    b.HasIndex("GroupId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Tactic", b =>
                {
                    b.Property<string>("TacticId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoftwareId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TacticId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Tactics");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Technique", b =>
                {
                    b.Property<string>("TechniqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TacticId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TechniqueId");

                    b.HasIndex("TacticId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserScenario", b =>
                {
                    b.Property<string>("UserScenarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserScenarioId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("UserScenarios");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserSoftware", b =>
                {
                    b.Property<string>("UserSoftwareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SoftwareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserSoftwareId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("UserSoftwares");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserTactic", b =>
                {
                    b.Property<string>("UserTacticId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TacticId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserTacticId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TacticId");

                    b.ToTable("UserTactics");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserTechnique", b =>
                {
                    b.Property<string>("UserTechniqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserTechniqueId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("UserTechniques");
                });

            modelBuilder.Entity("GroupScenario", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenariosScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScenarioSoftware", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenariosScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Software", null)
                        .WithMany()
                        .HasForeignKey("SoftwaresSoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScenarioTactic", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenariosScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Tactic", null)
                        .WithMany()
                        .HasForeignKey("TacticsTacticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScenarioTechnique", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenariosScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Technique", null)
                        .WithMany()
                        .HasForeignKey("TechniquesTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Answer", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Answers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Question", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Questions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Scenario", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ScenarioType", "ScenarioType")
                        .WithMany("Scenarios")
                        .HasForeignKey("ScenarioTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScenarioType");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Software", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Group", "Group")
                        .WithMany("Softwares")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Tactic", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Software", null)
                        .WithMany("Tactics")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Technique", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.Tactic", "Tactic")
                        .WithMany("Techniques")
                        .HasForeignKey("TacticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tactic");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserScenario", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserScenarios")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserSoftware", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserSoftwares")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserTactic", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserTactics")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Tactic", "Tactic")
                        .WithMany()
                        .HasForeignKey("TacticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Tactic");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.UserTechnique", b =>
                {
                    b.HasOne("WasmAI.ASG.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserTechniques")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasmAI.ASG.Models.Technique", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Technique");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.ApplicationUser", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("UserScenarios");

                    b.Navigation("UserSoftwares");

                    b.Navigation("UserTactics");

                    b.Navigation("UserTechniques");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Group", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.ScenarioType", b =>
                {
                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Software", b =>
                {
                    b.Navigation("Tactics");
                });

            modelBuilder.Entity("WasmAI.ASG.Models.Tactic", b =>
                {
                    b.Navigation("Techniques");
                });
#pragma warning restore 612, 618
        }
    }
}
